Для решения данной задачи решил использовать такие классы:
- Employee
- TeamLead
- Junior
- HR
- Manager

===================================================================================================

Employee

Является родительским классом для всех остальных классов. Имеет 2 свойста: name и surename.

=================================================================================================

TeamLead

Является потомком класса Employee. 
Имеет 2 дополнительных свойста:
- arrayMood - массив состояний
- idMood - целочисленное значение, которое можно использовать в качестве ключа в массиве arrayMood

По умолчанию каждый новый объект класса имеет очень хорошее настроение. При этом этоможно изменить,
указав при создании объекта необходимое состоние.

Также можно задать настроение уже существующего объекта используя метод setMoodString() и setMoodInt.

getMoodString() - получить текущее состояние объекта.

setStateChange() - меняет состояние объекта исходя из результатов работы другого объекта. При переходе 
в другое состояние текущий объект генерирует фразу используя метод teamLeadSay().

========================================================================================================

Junior

Является потомком класса Employee. 
Имеет дополнительные свойства:
- teamLead - объект класса TeamLead, руководитель этого джуна
- countLike - количество поощрений
- countDislike - количество выговоров

Методы:
- resultWorkJunior() - меняет состояние своего тимлида
- getCountDislike() - возвращает количество выговоров
- getCountLike() - возвращает количество поощрений

===========================================================================================================

HR

Является потомком класса Employee. 

Методы:
- getCountDislikeJunior - возвращает количество выговоров переданного объекта

===========================================================================================================

Manager

Является потомком класса Employee. 

Методы:
- getCountLike - возвращает количество поощрений переданного объекта
